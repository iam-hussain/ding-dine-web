/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as AboutImport } from './routes/about'
import { Route as UserImport } from './routes/_user'
import { Route as SplitImport } from './routes/_split'
import { Route as IndexImport } from './routes/index'
import { Route as UserHomeImport } from './routes/_user/home'
import { Route as SplitLoginImport } from './routes/_split/login'
import { Route as StoreSlugScreenImport } from './routes/store/$slug/_screen'
import { Route as StoreSlugFluidImport } from './routes/store/$slug/_fluid'
import { Route as StoreSlugFluidIndexImport } from './routes/store/$slug/_fluid/index'
import { Route as StoreSlugScreenPosImport } from './routes/store/$slug/_screen/pos'
import { Route as StoreSlugScreenKitchenImport } from './routes/store/$slug/_screen/kitchen'
import { Route as StoreSlugFluidSettingsImport } from './routes/store/$slug/_fluid/settings'
import { Route as StoreSlugFluidProductImport } from './routes/store/$slug/_fluid/product'
import { Route as StoreSlugFluidOrderImport } from './routes/store/$slug/_fluid/order'
import { Route as StoreSlugFluidGroupImport } from './routes/store/$slug/_fluid/group'
import { Route as StoreSlugFluidCategoryImport } from './routes/store/$slug/_fluid/category'

// Create Virtual Routes

const StoreSlugImport = createFileRoute('/store/$slug')()

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const SplitRoute = SplitImport.update({
  id: '/_split',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoreSlugRoute = StoreSlugImport.update({
  path: '/store/$slug',
  getParentRoute: () => rootRoute,
} as any)

const UserHomeRoute = UserHomeImport.update({
  path: '/home',
  getParentRoute: () => UserRoute,
} as any)

const SplitLoginRoute = SplitLoginImport.update({
  path: '/login',
  getParentRoute: () => SplitRoute,
} as any)

const StoreSlugScreenRoute = StoreSlugScreenImport.update({
  id: '/_screen',
  getParentRoute: () => StoreSlugRoute,
} as any)

const StoreSlugFluidRoute = StoreSlugFluidImport.update({
  id: '/_fluid',
  getParentRoute: () => StoreSlugRoute,
} as any)

const StoreSlugFluidIndexRoute = StoreSlugFluidIndexImport.update({
  path: '/',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

const StoreSlugScreenPosRoute = StoreSlugScreenPosImport.update({
  path: '/pos',
  getParentRoute: () => StoreSlugScreenRoute,
} as any)

const StoreSlugScreenKitchenRoute = StoreSlugScreenKitchenImport.update({
  path: '/kitchen',
  getParentRoute: () => StoreSlugScreenRoute,
} as any)

const StoreSlugFluidSettingsRoute = StoreSlugFluidSettingsImport.update({
  path: '/settings',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

const StoreSlugFluidProductRoute = StoreSlugFluidProductImport.update({
  path: '/product',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

const StoreSlugFluidOrderRoute = StoreSlugFluidOrderImport.update({
  path: '/order',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

const StoreSlugFluidGroupRoute = StoreSlugFluidGroupImport.update({
  path: '/group',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

const StoreSlugFluidCategoryRoute = StoreSlugFluidCategoryImport.update({
  path: '/category',
  getParentRoute: () => StoreSlugFluidRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_split': {
      id: '/_split'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SplitImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/_split/login': {
      id: '/_split/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof SplitLoginImport
      parentRoute: typeof SplitImport
    }
    '/_user/home': {
      id: '/_user/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof UserHomeImport
      parentRoute: typeof UserImport
    }
    '/store/$slug': {
      id: '/store/$slug'
      path: '/store/$slug'
      fullPath: '/store/$slug'
      preLoaderRoute: typeof StoreSlugImport
      parentRoute: typeof rootRoute
    }
    '/store/$slug/_fluid': {
      id: '/store/$slug/_fluid'
      path: '/store/$slug'
      fullPath: '/store/$slug'
      preLoaderRoute: typeof StoreSlugFluidImport
      parentRoute: typeof StoreSlugRoute
    }
    '/store/$slug/_screen': {
      id: '/store/$slug/_screen'
      path: ''
      fullPath: '/store/$slug'
      preLoaderRoute: typeof StoreSlugScreenImport
      parentRoute: typeof StoreSlugImport
    }
    '/store/$slug/_fluid/category': {
      id: '/store/$slug/_fluid/category'
      path: '/category'
      fullPath: '/store/$slug/category'
      preLoaderRoute: typeof StoreSlugFluidCategoryImport
      parentRoute: typeof StoreSlugFluidImport
    }
    '/store/$slug/_fluid/group': {
      id: '/store/$slug/_fluid/group'
      path: '/group'
      fullPath: '/store/$slug/group'
      preLoaderRoute: typeof StoreSlugFluidGroupImport
      parentRoute: typeof StoreSlugFluidImport
    }
    '/store/$slug/_fluid/order': {
      id: '/store/$slug/_fluid/order'
      path: '/order'
      fullPath: '/store/$slug/order'
      preLoaderRoute: typeof StoreSlugFluidOrderImport
      parentRoute: typeof StoreSlugFluidImport
    }
    '/store/$slug/_fluid/product': {
      id: '/store/$slug/_fluid/product'
      path: '/product'
      fullPath: '/store/$slug/product'
      preLoaderRoute: typeof StoreSlugFluidProductImport
      parentRoute: typeof StoreSlugFluidImport
    }
    '/store/$slug/_fluid/settings': {
      id: '/store/$slug/_fluid/settings'
      path: '/settings'
      fullPath: '/store/$slug/settings'
      preLoaderRoute: typeof StoreSlugFluidSettingsImport
      parentRoute: typeof StoreSlugFluidImport
    }
    '/store/$slug/_screen/kitchen': {
      id: '/store/$slug/_screen/kitchen'
      path: '/kitchen'
      fullPath: '/store/$slug/kitchen'
      preLoaderRoute: typeof StoreSlugScreenKitchenImport
      parentRoute: typeof StoreSlugScreenImport
    }
    '/store/$slug/_screen/pos': {
      id: '/store/$slug/_screen/pos'
      path: '/pos'
      fullPath: '/store/$slug/pos'
      preLoaderRoute: typeof StoreSlugScreenPosImport
      parentRoute: typeof StoreSlugScreenImport
    }
    '/store/$slug/_fluid/': {
      id: '/store/$slug/_fluid/'
      path: '/'
      fullPath: '/store/$slug/'
      preLoaderRoute: typeof StoreSlugFluidIndexImport
      parentRoute: typeof StoreSlugFluidImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  SplitRoute: SplitRoute.addChildren({ SplitLoginRoute }),
  UserRoute: UserRoute.addChildren({ UserHomeRoute }),
  AboutRoute,
  LogoutRoute,
  StoreSlugRoute: StoreSlugRoute.addChildren({
    StoreSlugFluidRoute: StoreSlugFluidRoute.addChildren({
      StoreSlugFluidCategoryRoute,
      StoreSlugFluidGroupRoute,
      StoreSlugFluidOrderRoute,
      StoreSlugFluidProductRoute,
      StoreSlugFluidSettingsRoute,
      StoreSlugFluidIndexRoute,
    }),
    StoreSlugScreenRoute: StoreSlugScreenRoute.addChildren({
      StoreSlugScreenKitchenRoute,
      StoreSlugScreenPosRoute,
    }),
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_split",
        "/_user",
        "/about",
        "/logout",
        "/store/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_split": {
      "filePath": "_split.tsx",
      "children": [
        "/_split/login"
      ]
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/home"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/_split/login": {
      "filePath": "_split/login.tsx",
      "parent": "/_split"
    },
    "/_user/home": {
      "filePath": "_user/home.tsx",
      "parent": "/_user"
    },
    "/store/$slug": {
      "filePath": "store/$slug",
      "children": [
        "/store/$slug/_fluid",
        "/store/$slug/_screen"
      ]
    },
    "/store/$slug/_fluid": {
      "filePath": "store/$slug/_fluid.tsx",
      "parent": "/store/$slug",
      "children": [
        "/store/$slug/_fluid/category",
        "/store/$slug/_fluid/group",
        "/store/$slug/_fluid/order",
        "/store/$slug/_fluid/product",
        "/store/$slug/_fluid/settings",
        "/store/$slug/_fluid/"
      ]
    },
    "/store/$slug/_screen": {
      "filePath": "store/$slug/_screen.tsx",
      "parent": "/store/$slug",
      "children": [
        "/store/$slug/_screen/kitchen",
        "/store/$slug/_screen/pos"
      ]
    },
    "/store/$slug/_fluid/category": {
      "filePath": "store/$slug/_fluid/category.tsx",
      "parent": "/store/$slug/_fluid"
    },
    "/store/$slug/_fluid/group": {
      "filePath": "store/$slug/_fluid/group.tsx",
      "parent": "/store/$slug/_fluid"
    },
    "/store/$slug/_fluid/order": {
      "filePath": "store/$slug/_fluid/order.tsx",
      "parent": "/store/$slug/_fluid"
    },
    "/store/$slug/_fluid/product": {
      "filePath": "store/$slug/_fluid/product.tsx",
      "parent": "/store/$slug/_fluid"
    },
    "/store/$slug/_fluid/settings": {
      "filePath": "store/$slug/_fluid/settings.tsx",
      "parent": "/store/$slug/_fluid"
    },
    "/store/$slug/_screen/kitchen": {
      "filePath": "store/$slug/_screen/kitchen.tsx",
      "parent": "/store/$slug/_screen"
    },
    "/store/$slug/_screen/pos": {
      "filePath": "store/$slug/_screen/pos.tsx",
      "parent": "/store/$slug/_screen"
    },
    "/store/$slug/_fluid/": {
      "filePath": "store/$slug/_fluid/index.tsx",
      "parent": "/store/$slug/_fluid"
    }
  }
}
ROUTE_MANIFEST_END */
