/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as AboutImport } from './routes/about'
import { Route as UserImport } from './routes/_user'
import { Route as StoreImport } from './routes/_store'
import { Route as SplitImport } from './routes/_split'
import { Route as IndexImport } from './routes/index'
import { Route as UserHomeImport } from './routes/_user/home'
import { Route as SplitLoginImport } from './routes/_split/login'
import { Route as StoreStoreSlugIndexImport } from './routes/_store/store/$slug/index'
import { Route as StoreStoreSlugSettingsImport } from './routes/_store/store/$slug/settings'
import { Route as StoreStoreSlugProductImport } from './routes/_store/store/$slug/product'
import { Route as StoreStoreSlugPosImport } from './routes/_store/store/$slug/pos'
import { Route as StoreStoreSlugOrderImport } from './routes/_store/store/$slug/order'
import { Route as StoreStoreSlugKitchenImport } from './routes/_store/store/$slug/kitchen'
import { Route as StoreStoreSlugGroupImport } from './routes/_store/store/$slug/group'
import { Route as StoreStoreSlugCategoryImport } from './routes/_store/store/$slug/category'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const StoreRoute = StoreImport.update({
  id: '/_store',
  getParentRoute: () => rootRoute,
} as any)

const SplitRoute = SplitImport.update({
  id: '/_split',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserHomeRoute = UserHomeImport.update({
  path: '/home',
  getParentRoute: () => UserRoute,
} as any)

const SplitLoginRoute = SplitLoginImport.update({
  path: '/login',
  getParentRoute: () => SplitRoute,
} as any)

const StoreStoreSlugIndexRoute = StoreStoreSlugIndexImport.update({
  path: '/store/$slug/',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugSettingsRoute = StoreStoreSlugSettingsImport.update({
  path: '/store/$slug/settings',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugProductRoute = StoreStoreSlugProductImport.update({
  path: '/store/$slug/product',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugPosRoute = StoreStoreSlugPosImport.update({
  path: '/store/$slug/pos',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugOrderRoute = StoreStoreSlugOrderImport.update({
  path: '/store/$slug/order',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugKitchenRoute = StoreStoreSlugKitchenImport.update({
  path: '/store/$slug/kitchen',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugGroupRoute = StoreStoreSlugGroupImport.update({
  path: '/store/$slug/group',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreSlugCategoryRoute = StoreStoreSlugCategoryImport.update({
  path: '/store/$slug/category',
  getParentRoute: () => StoreRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_split': {
      id: '/_split'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SplitImport
      parentRoute: typeof rootRoute
    }
    '/_store': {
      id: '/_store'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/_split/login': {
      id: '/_split/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof SplitLoginImport
      parentRoute: typeof SplitImport
    }
    '/_user/home': {
      id: '/_user/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof UserHomeImport
      parentRoute: typeof UserImport
    }
    '/_store/store/$slug/category': {
      id: '/_store/store/$slug/category'
      path: '/store/$slug/category'
      fullPath: '/store/$slug/category'
      preLoaderRoute: typeof StoreStoreSlugCategoryImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/group': {
      id: '/_store/store/$slug/group'
      path: '/store/$slug/group'
      fullPath: '/store/$slug/group'
      preLoaderRoute: typeof StoreStoreSlugGroupImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/kitchen': {
      id: '/_store/store/$slug/kitchen'
      path: '/store/$slug/kitchen'
      fullPath: '/store/$slug/kitchen'
      preLoaderRoute: typeof StoreStoreSlugKitchenImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/order': {
      id: '/_store/store/$slug/order'
      path: '/store/$slug/order'
      fullPath: '/store/$slug/order'
      preLoaderRoute: typeof StoreStoreSlugOrderImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/pos': {
      id: '/_store/store/$slug/pos'
      path: '/store/$slug/pos'
      fullPath: '/store/$slug/pos'
      preLoaderRoute: typeof StoreStoreSlugPosImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/product': {
      id: '/_store/store/$slug/product'
      path: '/store/$slug/product'
      fullPath: '/store/$slug/product'
      preLoaderRoute: typeof StoreStoreSlugProductImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/settings': {
      id: '/_store/store/$slug/settings'
      path: '/store/$slug/settings'
      fullPath: '/store/$slug/settings'
      preLoaderRoute: typeof StoreStoreSlugSettingsImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/$slug/': {
      id: '/_store/store/$slug/'
      path: '/store/$slug'
      fullPath: '/store/$slug'
      preLoaderRoute: typeof StoreStoreSlugIndexImport
      parentRoute: typeof StoreImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  SplitRoute: SplitRoute.addChildren({ SplitLoginRoute }),
  StoreRoute: StoreRoute.addChildren({
    StoreStoreSlugCategoryRoute,
    StoreStoreSlugGroupRoute,
    StoreStoreSlugKitchenRoute,
    StoreStoreSlugOrderRoute,
    StoreStoreSlugPosRoute,
    StoreStoreSlugProductRoute,
    StoreStoreSlugSettingsRoute,
    StoreStoreSlugIndexRoute,
  }),
  UserRoute: UserRoute.addChildren({ UserHomeRoute }),
  AboutRoute,
  LogoutRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_split",
        "/_store",
        "/_user",
        "/about",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_split": {
      "filePath": "_split.tsx",
      "children": [
        "/_split/login"
      ]
    },
    "/_store": {
      "filePath": "_store.tsx",
      "children": [
        "/_store/store/$slug/category",
        "/_store/store/$slug/group",
        "/_store/store/$slug/kitchen",
        "/_store/store/$slug/order",
        "/_store/store/$slug/pos",
        "/_store/store/$slug/product",
        "/_store/store/$slug/settings",
        "/_store/store/$slug/"
      ]
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/home"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/_split/login": {
      "filePath": "_split/login.tsx",
      "parent": "/_split"
    },
    "/_user/home": {
      "filePath": "_user/home.tsx",
      "parent": "/_user"
    },
    "/_store/store/$slug/category": {
      "filePath": "_store/store/$slug/category.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/group": {
      "filePath": "_store/store/$slug/group.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/kitchen": {
      "filePath": "_store/store/$slug/kitchen.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/order": {
      "filePath": "_store/store/$slug/order.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/pos": {
      "filePath": "_store/store/$slug/pos.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/product": {
      "filePath": "_store/store/$slug/product.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/settings": {
      "filePath": "_store/store/$slug/settings.tsx",
      "parent": "/_store"
    },
    "/_store/store/$slug/": {
      "filePath": "_store/store/$slug/index.tsx",
      "parent": "/_store"
    }
  }
}
ROUTE_MANIFEST_END */
